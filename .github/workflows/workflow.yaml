name: CI/CD Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/projetoimage:latest



  update-chart:
    runs-on: ubuntu-latest
    steps:
    
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.GIT_TOKEN }}

      - name: Clone Repo gitops
        run: git clone git@github.com:vitorsziglio/gitopsrepo.git

      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          repository: vitorsziglio/gitopsrepo
          token: ${{secrets.REPO_TOKEN}}

      - name: Update values.yml
        run: |
          sed -i 's/main/${{ github.sha }}/g' ./gitops/values.yaml
          git config user.name "vitorsziglio"
          git config user.email "vszgamer2608@gmail.com"
          git commit -am "Update image tag to ${{ github.ref }}"
          git push

  # ArgoCD Sync
  # - name: ArgoCD Sync
  #   uses: argoproj/argo-cd-action@v1
  #   with:
  #     args: app sync <app-name>
  # Adicione seus comandos de deploy aqui, como ssh e docker pull/run no servidor de produção.
  # Por exemplo:
  # ssh user@server "docker pull ${{ secrets.DOCKER_USERNAME }}/my-fastapi-app:latest && docker run -d -p 80:80 ${{ secrets.DOCKER_USERNAME }}/my-fastapi-app:latest"
